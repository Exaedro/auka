<!DOCTYPE html>
<html lang="es" data-id_usuario="<%- usuario.id_usuario %>" data-nombre="<%- usuario.nombre %>" data-apellido="<%- usuario.apellido %>" data-tipo_usuario="<%- usuario.tipo_usuario %>">
<head>
    <%- include('../parciales/head.html') %>
    <link rel="stylesheet" href="panel.css">

    <!-- ICONOS (Font Awesome) -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

    <!-- ANIMACIONES (Animate.css) -->
    <link rel="stylesheet"href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    
    <!-- SOCKET.IO -->
    <script type="module" src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/timeago.js@4.0.2/dist/timeago.min.js"></script>

    <script type="module">
        const nodos = document.querySelectorAll('.fecha-envio')

        timeago.render(nodos)
    </script>

    <script type="module">
        import { peticion } from './js/peticion.js'
        import { formatearHora } from './js/formatearHora.js'
        import { formato } from './js/renderizarTiempo.js'

        const socket = io();

        // Datos del preceptor logeado
        const idPreceptor = document.documentElement.dataset.id_usuario
        const nombrePreceptor = document.documentElement.dataset.nombre
        const apellidoPreceptor = document.documentElement.dataset.apellido
        const tipoUsuario = document.documentElement.dataset.tipo_usuario

        const respuestas = [
            "Yendo", "No puedo", "Derivo otro preceptor"
        ]

        // Elementos HTML
        const llamadosContenedor = document.querySelector('.llamados')
        const historialContenedor = document.querySelector('.historial-contenedor')
        const noHayLlamados = document.querySelector('.no-hay-llamados')

        /* ////////////////////////////////////////////////////////////////// */

        // ! NUEVO LLAMADO
        socket.on('nuevo-llamado', async (data) => {
            const { usuario: profesor, llamado } = data

            const nuevoLlamado = document.createElement('div');

            // Animacion
            nuevoLlamado.classList.add('animate__animated', 'animate__fadeInDown')

            nuevoLlamado.classList.add('llamado');
            nuevoLlamado.dataset.usuario_id = profesor.id
            nuevoLlamado.dataset.llamado_id = llamado.id
            nuevoLlamado.innerHTML = `
                <div class="llamado-cabecera">
                    <p class="llamado-titulo">${profesor.nombre} ${profesor.apellido}</p>
                    <p class="llamado-mensaje">${llamado.mensaje}</p>
                </div>
                <hr>
                <div class="llamado-cuerpo">
                    <p>Llamado - <span class="fecha-envio" datetime="${llamado.fecha_envio}"></span></p>   
                </div>
                `

            const llamadoRespuestas = document.createElement('div')
            llamadoRespuestas.classList.add('llamado-respuestas')

            for(const textoRespuesta of respuestas) {
                const respuesta = document.createElement('p')
                respuesta.classList.add('respuesta')
                respuesta.innerText = textoRespuesta
                respuesta.dataset.usuario_id = profesor.id

                await responderLlamado({ botonRespuesta: respuesta, llamadoId: llamado.id, profesorId: profesor.id, textoRespuesta })

                llamadoRespuestas.appendChild(respuesta)
            }
            
            nuevoLlamado.appendChild(llamadoRespuestas) 
            llamadosContenedor.prepend(nuevoLlamado)

            // Eliminar texto de que no hay llamados
            if(!noHayLlamados.classList.contains('esconder')) {
                noHayLlamados.classList.add('esconder')
            }  

            // Renderizar tiempo de envio en la vista del panel
            timeago.render(nuevoLlamado.querySelector('.fecha-envio'))
        })

        /* ////////////////////////////////////////////////////////////////// */

        const botonesRespuesta = document.querySelectorAll('.respuesta')

        for(const botonRespuesta of botonesRespuesta) {
            const llamado = botonRespuesta.parentElement.parentElement

            const llamadoId = llamado.dataset.llamado_id

            await responderLlamado({ 
                botonRespuesta,
                profesorId: botonRespuesta.dataset.usuario_id, 
                llamadoId, 
                textoRespuesta: botonRespuesta.innerText 
            })
        }

        /* ////////////////////////////////////////////////////////////////// */

        const botonesTerminado = document.querySelectorAll('.respuesta-terminado')

        for(const botonTerminado of botonesTerminado) {
            botonTerminado.addEventListener('click', async () => {
                const llamado = botonTerminado.parentElement.parentElement

                const llamadoId = llamado.dataset.llamado_id
                const profesorId = llamado.dataset.usuario_id

                await terminarLlamado({ 
                    profesor: { 
                        id: profesorId 
                    }, 
                    llamado: { 
                        id: llamadoId 
                    } 
                })
            })
        }

        /* ////////////////////////////////////////////////////////////////// */

        /**
         * @param {Object} usuario
         * @param {Socket} socket
         * @returns {void}
         */
        function mostrarBotonesFinales({ profesor, socket, llamado }) {
            const respuestas = document.querySelectorAll(`.llamado[data-usuario_id="${profesor.id}"] .respuesta`)
            
            for(const respuesta of respuestas) {
                respuesta.remove()
            }

            const terminado = document.createElement('p')
            terminado.classList.add('respuesta', 'respuesta-terminado')
            terminado.innerText = 'Terminado'
            terminado.dataset.usuario_id = profesor.id

            terminado.addEventListener('click', async () => {
                await terminarLlamado({ profesor, llamado })
            })

            const llamadoRespuestas = document.querySelector(`.llamado[data-usuario_id="${profesor.id}"] .llamado-respuestas`) 
            llamadoRespuestas.appendChild(terminado)
        }

        /* ////////////////////////////////////////////////////////////////// */

        async function responderLlamado({ botonRespuesta, profesorId, llamadoId, textoRespuesta }) {
            botonRespuesta.addEventListener('click', async () => {
                const resultado = await peticion({
                    url: '/api/respuestas/crear',
                    metodo: 'POST',
                    cuerpo: {
                        llamadoId: llamadoId,
                        preceptorId: idPreceptor,
                        mensaje: textoRespuesta,
                    }
                })

                socket.emit('respuesta-llamado', { 
                    usuario_id: profesorId, 
                    respuesta: textoRespuesta, 
                    nombre: nombrePreceptor, 
                    apellido: apellidoPreceptor 
                })

                mostrarBotonesFinales({ 
                    profesor: {
                        id: profesorId
                    }, 
                    llamado: {
                        id: llamadoId
                    } 
                })
            })
        }

        /**
         * @param {Object} profesor
         * @param {Object} llamado
         * @returns {void}
         */
        async function terminarLlamado({ profesor, llamado }) {
            const resultado = await peticion({
                url: '/api/llamados/actualizar/' + llamado.id,
                metodo: 'PUT',
                cuerpo: {
                    id_llamado: llamado.id,
                    finalizado: true
                }
            })

            if(!resultado.ok) {
                console.log(resultado)
                alert('ERROR GARRAFAL')
            }

            // ! TERMINAR LLAMADO
            socket.emit('terminar-llamado', { 
                usuario_id: profesor.id, 
                respuesta: "Terminado", 
                nombre: nombrePreceptor, 
                apellido: apellidoPreceptor 
            })

            location.reload()
        }

        function siNoHayLlamados() {
            const llamados = document.querySelectorAll('.llamado')

            if(llamados.length === 0) {
                noHayLlamados.classList.remove('esconder')
            }       
        }

        /* ////////////////////////////////////////////////////////////////// */

        // ! CANCELAR LLAMADO
        socket.on('cancelar-llamado', async (data) => {
            const { usuario_id: idProfesorLlamado } = data

            const llamado = document.querySelector('.llamado[data-usuario_id="' + idProfesorLlamado + '"]')

            // Marcar como finalizado y cancelado en la base de datos
            const llamadoId = llamado.dataset.llamado_id

            const resultado = await peticion({
                url: '/api/llamados/actualizar/' + llamadoId,
                metodo: 'PUT',
                cuerpo: {
                    id_llamado: llamadoId,
                    finalizado: true,
                    cancelado: true
                }
            })

            // Eliminar de la vista
            if(llamado) llamado.remove()

            // Mostrar texto si no hay llamados pendientes
            siNoHayLlamados()
        })

        /* ////////////////////////////////////////////////////////////////// */
    </script>
</head>
<body>
    <div class="panel-contenedor">
        <div class="columna columna-izquierda">
            <div class="titulo">
                <h1>Auka</h1>
            </div>
            <div class="historial">
                <p class="historial-titulo">Historial de llamados</p>

                <div class="historial-contenedor">

                    <% if(llamados !== null) { %>
                        <% for(let i = 0; i < llamados.length && i < 6; i++) { %>
                            <% if(llamados[i].finalizado == 1) { %>

                                <div class="historial-item">
                                    <div>
                                        <div class="historial-item-cabecera">
                                            <p class="historial-item-titulo">
                                                <%= llamados[i].nombre %> <%= llamados[i].apellido %>
                                            </p>
                                            <p class="historial-item-hora">
                                                <%= formatoHora(llamados[i].fecha_envio) %>
                                            </p>
                                        </div> 
                                        <div class="historial-item-mensaje">
                                            <p class="historial-item-texto">
                                                <%= llamados[i].mensaje %>
                                            </p>
                                        </div>
                                    </div>
                                    <div class="historial-item-pie">
                                        <p class="historial-item-estado <%= llamados[i].cancelado == 1 ? 'historial-estado-cancelado' : 'historial-estado-finalizado' %>">
                                            <span class="historial-item-estado-texto">

                                                <% if(llamados[i].cancelado == 1) { %>
                                                    Cancelado
                                                <% } else { %>
                                                    Finalizado
                                                <% } %>

                                            </span>
                                        </p>
                                    </div>
                                </div>

                            <% } %>
                        <% } %>
                    <% } %>

                </div>
            </div>
        </div>
        <div class="llamados">
            <% if(llamados !== null && llamados.filter(llamado => llamado.finalizado == 0).length > 0) { %>
                <% llamados.forEach(llamado => { %>
                    <% if(llamado.finalizado == 0) { %>
                        <div class="llamado" data-llamado_id="<%= llamado.id_llamado %>" data-usuario_id="<%= llamado.id_emisor %>">
                            <div class="llamado-cabecera">
                                <p class="llamado-titulo"><%= llamado.nombre %> <%= llamado.apellido %></p>
                                <p class="llamado-mensaje"><%= llamado.mensaje %></p>
                            </div>
                            <hr>
                            <div class="llamado-cuerpo">
                                <p>Llamado -<span class="fecha-envio" datetime="<%= llamado.fecha_envio %>"><%= formato(llamado.fecha_envio) %></span></p>
                            </div>
                            <% if(llamado.id_preceptor === null || typeof llamado.id_preceptor == 'undefined') { %>
                                <div class="llamado-respuestas">
                                    <p class="respuesta" data-usuario_id="<%= llamado.id_emisor %>">Yendo</p>
                                    <p class="respuesta" data-usuario_id="<%= llamado.id_emisor %>">No puedo</p>
                                    <p class="respuesta" data-usuario_id="<%= llamado.id_emisor %>">Derivo preceptor</p>
                                </div>
                            <% } else { %> 
                                <% if(llamado.id_preceptor == usuario.id_usuario) { %>
                                    <div class="llamado-respuestas">
                                        <p class="respuesta respuesta-terminado">Terminado</p>
                                    </div>
                                <% } %>
                            <% } %> 
                        </div>
                    <% } %>
                <% }) %>
            <% } else { %>
                <div class="no-hay-llamados">
                    <h1>No hay llamados pendientes.</h1>
                </div>
            <% } %>
        </div>
        <div class="columna columna-derecha">
            <div class="preceptores">
                <p class="preceptores-titulo">Preceptores activos</p>

                <div class="preceptores-contenedor">
                    <div class="preceptores-item">
                        <img src="img/user.png" alt="">
                        <p>Nombre del preceptor</p>
                    </div>
                    <div class="preceptores-item">
                        <img src="img/user.png" alt="">
                        <p>Nombre del preceptor</p>
                    </div>
                    <div class="preceptores-item">
                        <img src="img/user.png" alt="">
                        <p>Nombre del preceptor</p>
                    </div>
                </div>
            </div>
            <div class="perfil">
                <hr>
                <div class="perfil-info">
                    <p class="perfil-siglas"><%- usuario.nombre[0] %><%- usuario.apellido[0] %></p>
                    <div class="perfil-usuario">
                        <p class="perfil-nombre"><%- usuario.nombre %> <%- usuario.apellido %></p>
                        <p class="perfil-tipo-usuario"><%- usuario.tipo_usuario %></p>
                    </div>
                </div>
                <a class="perfil-cerrar-sesion" href="/logout"><i class="fa-solid fa-right-from-bracket"></i>Cerrar sesión</a>
            </div>
        </div>
    </div>
</body>
</html>